# Generated by Django 5.2.1 on 2025-07-02 18:19

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('trip_api', '0007_trip_total_on_duty_time'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ELDDailyLog',
            fields=[
                ('log_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('log_date', models.DateField()),
                ('driver_name', models.CharField(help_text="Driver's full name (auto-populated)", max_length=100)),
                ('driver_license_number', models.CharField(blank=True, help_text="Driver's CDL number (auto-populated)", max_length=50)),
                ('driver_license_state', models.CharField(blank=True, help_text="Driver's CDL state (auto-populated)", max_length=2)),
                ('employee_id', models.CharField(blank=True, help_text="Driver's employee ID (auto-populated)", max_length=50)),
                ('carrier_name', models.CharField(help_text='Carrier company name (auto-populated)', max_length=200)),
                ('carrier_address', models.TextField(help_text='Carrier company address (auto-populated)')),
                ('dot_number', models.CharField(blank=True, help_text='DOT number (auto-populated)', max_length=20)),
                ('mc_number', models.CharField(blank=True, help_text='MC number (auto-populated)', max_length=20)),
                ('vehicle_id', models.CharField(help_text='Vehicle identification (auto-populated)', max_length=50)),
                ('license_plate', models.CharField(blank=True, help_text='Vehicle license plate (auto-populated)', max_length=20)),
                ('vin', models.CharField(blank=True, help_text='Vehicle VIN (auto-populated)', max_length=17)),
                ('vehicle_make_model', models.CharField(blank=True, help_text='Vehicle make and model (auto-populated)', max_length=100)),
                ('total_off_duty_hours', models.DecimalField(decimal_places=2, default=0, help_text='Total off-duty hours for the day', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('total_sleeper_berth_hours', models.DecimalField(decimal_places=2, default=0, help_text='Total sleeper berth hours for the day', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('total_driving_hours', models.DecimalField(decimal_places=2, default=0, help_text='Total driving hours for the day', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(11)])),
                ('total_on_duty_not_driving_hours', models.DecimalField(decimal_places=2, default=0, help_text='Total on-duty (not driving) hours for the day', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)])),
                ('total_on_duty_hours', models.DecimalField(decimal_places=2, default=0, help_text='Total on-duty hours (driving + not driving)', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)])),
                ('total_distance_miles', models.DecimalField(decimal_places=2, default=0, help_text='Total distance driven for the day', max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('bill_of_lading', models.CharField(blank=True, help_text='Bill of lading number', max_length=100)),
                ('manifest_number', models.CharField(blank=True, help_text='Manifest number', max_length=100)),
                ('pickup_number', models.CharField(blank=True, help_text='Pickup number', max_length=100)),
                ('delivery_receipt', models.CharField(blank=True, help_text='Delivery receipt number', max_length=100)),
                ('commodity_description', models.CharField(blank=True, help_text='Description of cargo/commodity', max_length=200)),
                ('cargo_weight', models.CharField(blank=True, help_text='Weight of cargo', max_length=50)),
                ('is_hazmat', models.BooleanField(default=False, help_text='Whether cargo contains hazardous materials')),
                ('is_compliant', models.BooleanField(default=True, help_text='Whether this log meets HOS compliance requirements')),
                ('compliance_score', models.DecimalField(decimal_places=2, default=100.0, help_text='Compliance score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('violation_count', models.PositiveIntegerField(default=0, help_text='Number of HOS violations detected')),
                ('warning_count', models.PositiveIntegerField(default=0, help_text='Number of HOS warnings detected')),
                ('is_certified', models.BooleanField(default=False, help_text='Whether driver has certified this log')),
                ('certified_at', models.DateTimeField(blank=True, help_text='When driver certified this log', null=True)),
                ('certification_signature', models.TextField(blank=True, help_text='Digital signature data for certification')),
                ('certification_statement', models.TextField(default='I hereby certify that my data entries and my record of duty status for this 24-hour period are true and correct.', help_text='Certification statement text')),
                ('auto_generated', models.BooleanField(default=True, help_text='Whether this log was auto-generated from trip data')),
                ('manual_edits_count', models.PositiveIntegerField(default=0, help_text='Number of manual edits made to auto-generated data')),
                ('last_edited_at', models.DateTimeField(blank=True, help_text='When this log was last edited', null=True)),
                ('generated_at', models.DateTimeField(auto_now_add=True, help_text='When this log was initially generated')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this log was last updated')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eld_daily_logs', to=settings.AUTH_USER_MODEL)),
                ('last_edited_by', models.ForeignKey(blank=True, help_text='Last user to edit this log', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='eld_logs_edited', to=settings.AUTH_USER_MODEL)),
                ('trip', models.ForeignKey(help_text='The trip associated with this ELD log', on_delete=django.db.models.deletion.CASCADE, related_name='eld_daily_logs', to='trip_api.trip')),
            ],
            options={
                'verbose_name': 'ELD Daily Log',
                'verbose_name_plural': 'ELD Daily Logs',
                'ordering': ['-log_date', '-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='ELDExportRecord',
            fields=[
                ('export_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this export', primary_key=True, serialize=False)),
                ('export_format', models.CharField(choices=[('pdf', 'PDF Document'), ('csv', 'CSV Data'), ('json', 'JSON Data'), ('xml', 'XML Data'), ('dot_format', 'DOT Compliant Format')], help_text='Format of the exported data', max_length=20)),
                ('export_purpose', models.CharField(choices=[('dot_inspection', 'DOT Inspection'), ('driver_record', 'Driver Personal Record'), ('fleet_audit', 'Fleet Management Audit'), ('compliance_review', 'Compliance Review'), ('backup', 'Data Backup'), ('other', 'Other Purpose')], help_text='Purpose of this export', max_length=20)),
                ('date_range_start', models.DateField(help_text='Start date of exported logs')),
                ('date_range_end', models.DateField(help_text='End date of exported logs')),
                ('file_name', models.CharField(help_text='Name of exported file', max_length=255)),
                ('file_size_bytes', models.PositiveIntegerField(default=0, help_text='Size of exported file in bytes')),
                ('file_checksum', models.CharField(blank=True, help_text='SHA-256 checksum of exported file', max_length=64)),
                ('exported_at', models.DateTimeField(auto_now_add=True, help_text='When this export was created')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this export')),
                ('is_for_dot_inspection', models.BooleanField(default=False, help_text='Whether this export is for DOT inspection purposes')),
                ('inspection_reference', models.CharField(blank=True, help_text='DOT inspection reference number (if applicable)', max_length=100)),
                ('daily_logs', models.ManyToManyField(help_text='Daily logs included in this export', related_name='export_records', to='trip_api.elddailylog')),
                ('exported_by', models.ForeignKey(help_text='User who created this export', on_delete=django.db.models.deletion.CASCADE, related_name='eld_exports_created', to=settings.AUTH_USER_MODEL)),
                ('trip', models.ForeignKey(blank=True, help_text='Trip associated with exported logs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='eld_export_records', to='trip_api.trip')),
            ],
            options={
                'verbose_name': 'ELD Export Record',
                'verbose_name_plural': 'ELD Export Records',
                'ordering': ['-exported_at'],
            },
        ),
        migrations.CreateModel(
            name='ELDLogEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField(help_text='Start time of this duty period (24-hour format)')),
                ('end_time', models.TimeField(help_text='End time of this duty period (24-hour format)')),
                ('duty_status', models.CharField(choices=[('off_duty', 'Off Duty'), ('sleeper_berth', 'Sleeper Berth'), ('driving', 'Driving'), ('on_duty_not_driving', 'On Duty (Not Driving)')], help_text='Duty status for this period', max_length=20)),
                ('duration_minutes', models.PositiveIntegerField(help_text='Duration of this period in minutes')),
                ('duration_hours', models.DecimalField(decimal_places=2, help_text='Duration of this period in hours (calculated)', max_digits=4)),
                ('start_location', models.CharField(blank=True, help_text='Starting location for this period', max_length=500)),
                ('end_location', models.CharField(blank=True, help_text='Ending location for this period', max_length=500)),
                ('location_type', models.CharField(blank=True, choices=[('trip_start', 'Trip Start'), ('pickup', 'Pickup Location'), ('delivery', 'Delivery Location'), ('fuel_stop', 'Fuel Stop'), ('rest_area', 'Rest Area'), ('intermediate_stop', 'Intermediate Stop'), ('unknown', 'Unknown Location')], help_text='Type of location for this period', max_length=50)),
                ('vehicle_miles', models.DecimalField(decimal_places=2, default=0, help_text='Miles driven during this period', max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('remarks', models.TextField(blank=True, help_text='Remarks for this duty period (auto-generated + manual)')),
                ('auto_generated_remarks', models.TextField(blank=True, help_text='Auto-generated remarks based on trip context')),
                ('manual_remarks', models.TextField(blank=True, help_text='Manual remarks added by driver')),
                ('grid_row', models.PositiveIntegerField(help_text='Grid row for ELD visualization (0-10)')),
                ('grid_column_start', models.PositiveIntegerField(help_text='Starting grid column for ELD visualization')),
                ('grid_column_end', models.PositiveIntegerField(help_text='Ending grid column for ELD visualization')),
                ('is_compliant', models.BooleanField(default=True, help_text='Whether this entry meets HOS compliance')),
                ('compliance_notes', models.TextField(blank=True, help_text='Notes about compliance issues with this entry')),
                ('was_manually_edited', models.BooleanField(default=False, help_text='Whether this entry has been manually edited')),
                ('original_auto_data', models.JSONField(default=dict, help_text='Original auto-generated data for audit purposes')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this entry was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this entry was last updated')),
                ('daily_log', models.ForeignKey(help_text='The daily log this entry belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='log_entries', to='trip_api.elddailylog')),
                ('hos_period', models.ForeignKey(help_text='The HOS period this entry was generated from', on_delete=django.db.models.deletion.CASCADE, related_name='eld_log_entries', to='trip_api.hosperiod')),
            ],
            options={
                'verbose_name': 'ELD Log Entry',
                'verbose_name_plural': 'ELD Log Entries',
                'ordering': ['daily_log', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='ELDLocationRemark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.TimeField(help_text='Time of location change')),
                ('location', models.CharField(help_text='Location description', max_length=500)),
                ('location_type', models.CharField(blank=True, choices=[('trip_start', 'Trip Start'), ('pickup', 'Pickup Location'), ('delivery', 'Delivery Location'), ('fuel_stop', 'Fuel Stop'), ('rest_area', 'Rest Area'), ('state_line', 'State Line Crossing'), ('weigh_station', 'Weigh Station'), ('intermediate_stop', 'Intermediate Stop'), ('duty_status_change', 'Duty Status Change')], help_text='Type of location change', max_length=50)),
                ('duty_status', models.CharField(choices=[('off_duty', 'Off Duty'), ('sleeper_berth', 'Sleeper Berth'), ('driving', 'Driving'), ('on_duty_not_driving', 'On Duty (Not Driving)')], help_text='Duty status at this location', max_length=20)),
                ('remarks', models.TextField(blank=True, help_text='Additional remarks about this location change')),
                ('auto_generated', models.BooleanField(default=True, help_text='Whether this remark was auto-generated')),
                ('is_duty_status_change', models.BooleanField(default=True, help_text='Whether this remark represents a duty status change')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this remark was created')),
                ('daily_log', models.ForeignKey(help_text='The daily log this remark belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='location_remarks', to='trip_api.elddailylog')),
                ('log_entry', models.ForeignKey(help_text='The log entry this remark is associated with', on_delete=django.db.models.deletion.CASCADE, related_name='location_remarks', to='trip_api.eldlogentry')),
            ],
            options={
                'verbose_name': 'ELD Location Remark',
                'verbose_name_plural': 'ELD Location Remarks',
                'ordering': ['daily_log', 'time'],
            },
        ),
        migrations.CreateModel(
            name='ELDComplianceViolation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('violation_type', models.CharField(choices=[('daily_driving_limit', 'Daily Driving Limit Exceeded'), ('daily_on_duty_limit', 'Daily On-Duty Limit Exceeded'), ('insufficient_off_duty', 'Insufficient Off-Duty Time'), ('missing_30min_break', 'Missing 30-Minute Break'), ('weekly_driving_limit', 'Weekly Driving Limit Exceeded'), ('daily_time_accounting', 'Daily Time Accounting Error'), ('missing_location_change', 'Missing Location Change'), ('invalid_duty_status', 'Invalid Duty Status Sequence')], help_text='Type of HOS violation', max_length=50)),
                ('severity', models.CharField(choices=[('critical', 'Critical'), ('major', 'Major'), ('minor', 'Minor'), ('warning', 'Warning')], default='major', help_text='Severity level of the violation', max_length=10)),
                ('description', models.TextField(help_text='Detailed description of the violation')),
                ('actual_value', models.DecimalField(blank=True, decimal_places=2, help_text='Actual value that caused violation', max_digits=10, null=True)),
                ('limit_value', models.DecimalField(blank=True, decimal_places=2, help_text='Legal limit value', max_digits=10, null=True)),
                ('violation_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Amount by which limit was exceeded', max_digits=10, null=True)),
                ('is_resolved', models.BooleanField(default=False, help_text='Whether this violation has been resolved')),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes about how violation was resolved')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When violation was resolved', null=True)),
                ('detected_at', models.DateTimeField(auto_now_add=True, help_text='When this violation was detected')),
                ('resolved_by', models.ForeignKey(blank=True, help_text='User who resolved this violation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='eld_violations_resolved', to=settings.AUTH_USER_MODEL)),
                ('daily_log', models.ForeignKey(help_text='The daily log this violation belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='compliance_violations', to='trip_api.elddailylog')),
                ('log_entry', models.ForeignKey(blank=True, help_text='The specific log entry with violation (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compliance_violations', to='trip_api.eldlogentry')),
            ],
            options={
                'verbose_name': 'ELD Compliance Violation',
                'verbose_name_plural': 'ELD Compliance Violations',
                'ordering': ['-detected_at', 'severity'],
            },
        ),
        migrations.AddIndex(
            model_name='elddailylog',
            index=models.Index(fields=['driver', '-log_date'], name='trip_api_el_driver__fb7d59_idx'),
        ),
        migrations.AddIndex(
            model_name='elddailylog',
            index=models.Index(fields=['trip', 'log_date'], name='trip_api_el_trip_id_9ae319_idx'),
        ),
        migrations.AddIndex(
            model_name='elddailylog',
            index=models.Index(fields=['log_date', 'driver'], name='trip_api_el_log_dat_d98557_idx'),
        ),
        migrations.AddIndex(
            model_name='elddailylog',
            index=models.Index(fields=['is_certified', '-log_date'], name='trip_api_el_is_cert_1a7586_idx'),
        ),
        migrations.AddIndex(
            model_name='elddailylog',
            index=models.Index(fields=['is_compliant', '-log_date'], name='trip_api_el_is_comp_689aeb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='elddailylog',
            unique_together={('trip', 'log_date')},
        ),
        migrations.AddIndex(
            model_name='eldexportrecord',
            index=models.Index(fields=['exported_by', '-exported_at'], name='trip_api_el_exporte_6a1464_idx'),
        ),
        migrations.AddIndex(
            model_name='eldexportrecord',
            index=models.Index(fields=['export_purpose', '-exported_at'], name='trip_api_el_export__1a907b_idx'),
        ),
        migrations.AddIndex(
            model_name='eldexportrecord',
            index=models.Index(fields=['trip', '-exported_at'], name='trip_api_el_trip_id_32f949_idx'),
        ),
        migrations.AddIndex(
            model_name='eldexportrecord',
            index=models.Index(fields=['is_for_dot_inspection', '-exported_at'], name='trip_api_el_is_for__2806e8_idx'),
        ),
        migrations.AddIndex(
            model_name='eldlogentry',
            index=models.Index(fields=['daily_log', 'start_time'], name='trip_api_el_daily_l_1742e7_idx'),
        ),
        migrations.AddIndex(
            model_name='eldlogentry',
            index=models.Index(fields=['duty_status', 'start_time'], name='trip_api_el_duty_st_fe5c22_idx'),
        ),
        migrations.AddIndex(
            model_name='eldlogentry',
            index=models.Index(fields=['daily_log', 'duty_status'], name='trip_api_el_daily_l_be4cba_idx'),
        ),
        migrations.AddIndex(
            model_name='eldlocationremark',
            index=models.Index(fields=['daily_log', 'time'], name='trip_api_el_daily_l_acbbe6_idx'),
        ),
        migrations.AddIndex(
            model_name='eldlocationremark',
            index=models.Index(fields=['location_type', 'time'], name='trip_api_el_locatio_325fea_idx'),
        ),
        migrations.AddIndex(
            model_name='eldcomplianceviolation',
            index=models.Index(fields=['daily_log', 'violation_type'], name='trip_api_el_daily_l_c7f061_idx'),
        ),
        migrations.AddIndex(
            model_name='eldcomplianceviolation',
            index=models.Index(fields=['severity', '-detected_at'], name='trip_api_el_severit_401a4a_idx'),
        ),
        migrations.AddIndex(
            model_name='eldcomplianceviolation',
            index=models.Index(fields=['is_resolved', '-detected_at'], name='trip_api_el_is_reso_d0f2c9_idx'),
        ),
    ]
