# Generated by Django 5.2.1 on 2025-06-05 16:01

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SpotterCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Spotter', max_length=255)),
                ('usdot_number', models.CharField(max_length=50, unique=True)),
                ('mc_number', models.CharField(max_length=50, unique=True)),
                ('address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=2)),
                ('zip_code', models.CharField(max_length=10)),
                ('phone_number', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField(blank=True, null=True)),
                ('default_duty_cycle', models.CharField(choices=[('60_7', '60 hours / 7 days'), ('70_8', '70 hours / 8 days')], default='70_8', max_length=10)),
                ('timezone', models.CharField(default='America/Chicago', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Spotter Administrator',
                'verbose_name_plural': 'Spotter Administrator',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('driver_license_number', models.CharField(blank=True, max_length=50, null=True)),
                ('driver_license_state', models.CharField(blank=True, max_length=2, null=True)),
                ('driver_license_expiration', models.DateField(blank=True, help_text="Expiration date of the driver's license", null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('is_driver', models.BooleanField(default=True, help_text='Can log hours and view own logs')),
                ('is_fleet_manager', models.BooleanField(default=False, help_text='Can manage drivers and vehicles')),
                ('is_super_admin', models.BooleanField(default=False, help_text='System administrator')),
                ('employee_id', models.CharField(blank=True, help_text='This field will be auto-generated.', max_length=50, null=True, unique=True)),
                ('hire_date', models.DateField(blank=True, null=True)),
                ('is_active_driver', models.BooleanField(default=True, help_text='Currently active driver status')),
                ('created_by', models.ForeignKey(blank=True, help_text='Manager who created this account', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Staffs',
                'verbose_name_plural': 'Staffs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_number', models.CharField(max_length=50, unique=True)),
                ('vin', models.CharField(max_length=17, unique=True)),
                ('license_plate', models.CharField(max_length=15, unique=True)),
                ('license_plate_state', models.CharField(default='TX', max_length=2)),
                ('year', models.PositiveIntegerField()),
                ('make', models.CharField(max_length=50)),
                ('model', models.CharField(max_length=50)),
                ('vehicle_type', models.CharField(choices=[('truck', 'Truck'), ('trailer', 'Trailer'), ('truck_trailer', 'Truck with Trailer')], default='truck', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('maintenance_status', models.CharField(choices=[('active', 'Active'), ('maintenance', 'In Maintenance'), ('out of service', 'Out of Service')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='Fleet manager who created this vehicle record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vehicles_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'ordering': ['unit_number'],
            },
        ),
        migrations.CreateModel(
            name='DriverVehicleAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('assignment_type', models.CharField(choices=[('permanent', 'Permanent Assignment'), ('temporary', 'Temporary Assignment')], default='permanent', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_by', models.ForeignKey(blank=True, limit_choices_to={'is_fleet_manager': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assignments_made', to=settings.AUTH_USER_MODEL)),
                ('driver', models.ForeignKey(help_text='Driver assigned to vehicle', limit_choices_to={'is_active_driver': True, 'is_driver': True}, on_delete=django.db.models.deletion.CASCADE, related_name='vehicle_assignments', to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='driver_assignments', to='users.vehicle')),
            ],
            options={
                'verbose_name': 'Driver-Vehicle Assignment',
                'verbose_name_plural': 'Driver-Vehicle Assignments',
                'ordering': ['-start_date'],
                'unique_together': {('driver', 'vehicle', 'start_date')},
            },
        ),
    ]
